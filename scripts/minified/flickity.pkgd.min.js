/*!
 * Flickity PACKAGED v2.2.1
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2020 Metafizzy
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('jquery-bridget/jquery-bridget', ['jquery'], function(i) {
      return e(t, i);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('jquery'));
  } else {
    t.jQueryBridget = e(t, t.jQuery);
  }
})(window, function t(e, i) {
  const n = Array.prototype.slice;
  const s = e.console;
  const r =
    typeof s === 'undefined'
      ? function() {}
      : function(t) {
          s.error(t);
        };
  function o(t, s, o) {
    o = o || i || e.jQuery;
    if (!o) {
      return;
    }
    if (!s.prototype.option) {
      s.prototype.option = function(t) {
        if (!o.isPlainObject(t)) {
          return;
        }
        this.options = o.extend(true, this.options, t);
      };
    }
    o.fn[t] = function(t) {
      if (typeof t === 'string') {
        const e = n.call(arguments, 1);
        return l(this, t, e);
      }
      h(this, t);
      return this;
    };
    function l(e, i, n) {
      let s;
      const a = `$().${t}("${i}")`;
      e.each(function(e, l) {
        const h = o.data(l, t);
        if (!h) {
          r(`${t} not initialized. Cannot call methods, i.e. ${a}`);
          return;
        }
        const c = h[i];
        if (!c || i.charAt(0) == '_') {
          r(`${a} is not a valid method`);
          return;
        }
        const u = c.apply(h, n);
        s = s === undefined ? u : s;
      });
      return s !== undefined ? s : e;
    }
    function h(e, i) {
      e.each(function(e, n) {
        let r = o.data(n, t);
        if (r) {
          r.option(i);
          r._init();
        } else {
          r = new s(n, i);
          o.data(n, t, r);
        }
      });
    }
    a(o);
  }
  function a(t) {
    if (!t || (t && t.bridget)) {
      return;
    }
    t.bridget = o;
  }
  a(i || e.jQuery);
  return o;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('ev-emitter/ev-emitter', e);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e();
  } else {
    t.EvEmitter = e();
  }
})(typeof window !== 'undefined' ? window : this, function() {
  function t() {}
  const e = t.prototype;
  e.on = function(t, e) {
    if (!t || !e) {
      return;
    }
    const i = (this._events = this._events || {});
    const n = (i[t] = i[t] || []);
    if (n.indexOf(e) == -1) {
      n.push(e);
    }
    return this;
  };
  e.once = function(t, e) {
    if (!t || !e) {
      return;
    }
    this.on(t, e);
    const i = (this._onceEvents = this._onceEvents || {});
    const n = (i[t] = i[t] || {});
    n[e] = true;
    return this;
  };
  e.off = function(t, e) {
    const i = this._events && this._events[t];
    if (!i || !i.length) {
      return;
    }
    const n = i.indexOf(e);
    if (n != -1) {
      i.splice(n, 1);
    }
    return this;
  };
  e.emitEvent = function(t, e) {
    let i = this._events && this._events[t];
    if (!i || !i.length) {
      return;
    }
    i = i.slice(0);
    e = e || [];
    const n = this._onceEvents && this._onceEvents[t];
    for (let s = 0; s < i.length; s++) {
      const r = i[s];
      const o = n && n[r];
      if (o) {
        this.off(t, r);
        delete n[r];
      }
      r.apply(this, e);
    }
    return this;
  };
  e.allOff = function() {
    delete this._events;
    delete this._onceEvents;
  };
  return t;
});
/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('get-size/get-size', e);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e();
  } else {
    t.getSize = e();
  }
})(window, function e() {
  function t(t) {
    const e = parseFloat(t);
    const i = t.indexOf('%') == -1 && !isNaN(e);
    return i && e;
  }
  function e() {}
  const i =
    typeof console === 'undefined'
      ? e
      : function(t) {
          console.error(t);
        };
  const n = [
    'paddingLeft',
    'paddingRight',
    'paddingTop',
    'paddingBottom',
    'marginLeft',
    'marginRight',
    'marginTop',
    'marginBottom',
    'borderLeftWidth',
    'borderRightWidth',
    'borderTopWidth',
    'borderBottomWidth',
  ];
  const s = n.length;
  function r() {
    const t = { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 };
    for (let e = 0; e < s; e++) {
      const i = n[e];
      t[i] = 0;
    }
    return t;
  }
  function o(t) {
    const e = getComputedStyle(t);
    if (!e) {
      i(
        `Style returned ${e}. Are you running this code in a hidden iframe on Firefox? ` +
          `See https://bit.ly/getsizebug1`
      );
    }
    return e;
  }
  let a = false;
  let l;
  function h() {
    if (a) {
      return;
    }
    a = true;
    const e = document.createElement('div');
    e.style.width = '200px';
    e.style.padding = '1px 2px 3px 4px';
    e.style.borderStyle = 'solid';
    e.style.borderWidth = '1px 2px 3px 4px';
    e.style.boxSizing = 'border-box';
    const i = document.body || document.documentElement;
    i.appendChild(e);
    const n = o(e);
    l = Math.round(t(n.width)) == 200;
    c.isBoxSizeOuter = l;
    i.removeChild(e);
  }
  function c(e) {
    h();
    if (typeof e === 'string') {
      e = document.querySelector(e);
    }
    if (!e || typeof e !== 'object' || !e.nodeType) {
      return;
    }
    const i = o(e);
    if (i.display == 'none') {
      return r();
    }
    const a = {};
    a.width = e.offsetWidth;
    a.height = e.offsetHeight;
    const c = (a.isBorderBox = i.boxSizing == 'border-box');
    for (let u = 0; u < s; u++) {
      const d = n[u];
      const f = i[d];
      const p = parseFloat(f);
      a[d] = !isNaN(p) ? p : 0;
    }
    const v = a.paddingLeft + a.paddingRight;
    const g = a.paddingTop + a.paddingBottom;
    const m = a.marginLeft + a.marginRight;
    const y = a.marginTop + a.marginBottom;
    const b = a.borderLeftWidth + a.borderRightWidth;
    const E = a.borderTopWidth + a.borderBottomWidth;
    const S = c && l;
    const C = t(i.width);
    if (C !== false) {
      a.width = C + (S ? 0 : v + b);
    }
    const x = t(i.height);
    if (x !== false) {
      a.height = x + (S ? 0 : g + E);
    }
    a.innerWidth = a.width - (v + b);
    a.innerHeight = a.height - (g + E);
    a.outerWidth = a.width + m;
    a.outerHeight = a.height + y;
    return a;
  }
  return c;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('desandro-matches-selector/matches-selector', e);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e();
  } else {
    t.matchesSelector = e();
  }
})(window, function i() {
  const t = (function() {
    const t = window.Element.prototype;
    if (t.matches) {
      return 'matches';
    }
    if (t.matchesSelector) {
      return 'matchesSelector';
    }
    const e = ['webkit', 'moz', 'ms', 'o'];
    for (let i = 0; i < e.length; i++) {
      const n = e[i];
      const s = `${n}MatchesSelector`;
      if (t[s]) {
        return s;
      }
    }
  })();
  return function e(i, n) {
    return i[t](n);
  };
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('fizzy-ui-utils/utils', ['desandro-matches-selector/matches-selector'], function(i) {
      return e(t, i);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('desandro-matches-selector'));
  } else {
    t.fizzyUIUtils = e(t, t.matchesSelector);
  }
})(window, function n(t, e) {
  const i = {};
  i.extend = function(t, e) {
    for (const i in e) {
      t[i] = e[i];
    }
    return t;
  };
  i.modulo = function(t, e) {
    return ((t % e) + e) % e;
  };
  const n = Array.prototype.slice;
  i.makeArray = function(t) {
    if (Array.isArray(t)) {
      return t;
    }
    if (t === null || t === undefined) {
      return [];
    }
    const e = typeof t === 'object' && typeof t.length === 'number';
    if (e) {
      return n.call(t);
    }
    return [t];
  };
  i.removeFrom = function(t, e) {
    const i = t.indexOf(e);
    if (i != -1) {
      t.splice(i, 1);
    }
  };
  i.getParent = function(t, i) {
    while (t.parentNode && t != document.body) {
      t = t.parentNode;
      if (e(t, i)) {
        return t;
      }
    }
  };
  i.getQueryElement = function(t) {
    if (typeof t === 'string') {
      return document.querySelector(t);
    }
    return t;
  };
  i.handleEvent = function(t) {
    const e = `on${t.type}`;
    if (this[e]) {
      this[e](t);
    }
  };
  i.filterFindElements = function(t, n) {
    t = i.makeArray(t);
    const s = [];
    t.forEach(function(t) {
      if (!(t instanceof HTMLElement)) {
        return;
      }
      if (!n) {
        s.push(t);
        return;
      }
      if (e(t, n)) {
        s.push(t);
      }
      const i = t.querySelectorAll(n);
      for (let r = 0; r < i.length; r++) {
        s.push(i[r]);
      }
    });
    return s;
  };
  i.debounceMethod = function(t, e, i) {
    i = i || 100;
    const n = t.prototype[e];
    const s = `${e}Timeout`;
    t.prototype[e] = function() {
      const t = this[s];
      clearTimeout(t);
      const e = arguments;
      const r = this;
      this[s] = setTimeout(function() {
        n.apply(r, e);
        delete r[s];
      }, i);
    };
  };
  i.docReady = function(t) {
    const e = document.readyState;
    if (e == 'complete' || e == 'interactive') {
      setTimeout(t);
    } else {
      document.addEventListener('DOMContentLoaded', t);
    }
  };
  i.toDashed = function(t) {
    return t
      .replace(/(.)([A-Z])/g, function(t, e, i) {
        return `${e}-${i}`;
      })
      .toLowerCase();
  };
  const s = t.console;
  i.htmlInit = function(e, n) {
    i.docReady(function() {
      const r = i.toDashed(n);
      const o = `data-${r}`;
      const a = document.querySelectorAll(`[${o}]`);
      const l = document.querySelectorAll(`.js-${r}`);
      const h = i.makeArray(a).concat(i.makeArray(l));
      const c = `${o}-options`;
      const u = t.jQuery;
      h.forEach(function(t) {
        const i = t.getAttribute(o) || t.getAttribute(c);
        let r;
        try {
          r = i && JSON.parse(i);
        } catch (a) {
          if (s) {
            s.error(`Error parsing ${o} on ${t.className}: ${a}`);
          }
          return;
        }
        const l = new e(t, r);
        if (u) {
          u.data(t, n, l);
        }
      });
    });
  };
  return i;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/cell', ['get-size/get-size'], function(i) {
      return e(t, i);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('get-size'));
  } else {
    t.Flickity = t.Flickity || {};
    t.Flickity.Cell = e(t, t.getSize);
  }
})(window, function s(t, e) {
  function i(t, e) {
    this.element = t;
    this.parent = e;
    this.create();
  }
  const n = i.prototype;
  n.create = function() {
    this.element.style.position = 'absolute';
    this.element.setAttribute('aria-hidden', 'true');
    this.x = 0;
    this.shift = 0;
  };
  n.destroy = function() {
    this.unselect();
    this.element.style.position = '';
    const t = this.parent.originSide;
    this.element.style[t] = '';
  };
  n.getSize = function() {
    this.size = e(this.element);
  };
  n.setPosition = function(t) {
    this.x = t;
    this.updateTarget();
    this.renderPosition(t);
  };
  n.updateTarget = n.setDefaultTarget = function() {
    const t = this.parent.originSide == 'left' ? 'marginLeft' : 'marginRight';
    this.target = this.x + this.size[t] + this.size.width * this.parent.cellAlign;
  };
  n.renderPosition = function(t) {
    const e = this.parent.originSide;
    this.element.style[e] = this.parent.getPositionValue(t);
  };
  n.select = function() {
    this.element.classList.add('is-selected');
    this.element.removeAttribute('aria-hidden');
  };
  n.unselect = function() {
    this.element.classList.remove('is-selected');
    this.element.setAttribute('aria-hidden', 'true');
  };
  n.wrapShift = function(t) {
    this.shift = t;
    this.renderPosition(this.x + this.parent.slideableWidth * t);
  };
  n.remove = function() {
    this.element.parentNode.removeChild(this.element);
  };
  return i;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/slide', e);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e();
  } else {
    t.Flickity = t.Flickity || {};
    t.Flickity.Slide = e();
  }
})(window, function r() {
  function t(t) {
    this.parent = t;
    this.isOriginLeft = t.originSide == 'left';
    this.cells = [];
    this.outerWidth = 0;
    this.height = 0;
  }
  const e = t.prototype;
  e.addCell = function(t) {
    this.cells.push(t);
    this.outerWidth += t.size.outerWidth;
    this.height = Math.max(t.size.outerHeight, this.height);
    if (this.cells.length == 1) {
      this.x = t.x;
      const e = this.isOriginLeft ? 'marginLeft' : 'marginRight';
      this.firstMargin = t.size[e];
    }
  };
  e.updateTarget = function() {
    const t = this.isOriginLeft ? 'marginRight' : 'marginLeft';
    const e = this.getLastCell();
    const i = e ? e.size[t] : 0;
    const n = this.outerWidth - (this.firstMargin + i);
    this.target = this.x + this.firstMargin + n * this.parent.cellAlign;
  };
  e.getLastCell = function() {
    return this.cells[this.cells.length - 1];
  };
  e.select = function() {
    this.cells.forEach(function(t) {
      t.select();
    });
  };
  e.unselect = function() {
    this.cells.forEach(function(t) {
      t.unselect();
    });
  };
  e.getCellElements = function() {
    return this.cells.map(function(t) {
      return t.element;
    });
  };
  return t;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/animate', ['fizzy-ui-utils/utils'], function(i) {
      return e(t, i);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('fizzy-ui-utils'));
  } else {
    t.Flickity = t.Flickity || {};
    t.Flickity.animatePrototype = e(t, t.fizzyUIUtils);
  }
})(window, function o(t, e) {
  const i = {};
  i.startAnimation = function() {
    if (this.isAnimating) {
      return;
    }
    this.isAnimating = true;
    this.restingFrames = 0;
    this.animate();
  };
  i.animate = function() {
    this.applyDragForce();
    this.applySelectedAttraction();
    const t = this.x;
    this.integratePhysics();
    this.positionSlider();
    this.settle(t);
    if (this.isAnimating) {
      const e = this;
      requestAnimationFrame(function i() {
        e.animate();
      });
    }
  };
  i.positionSlider = function() {
    let t = this.x;
    if (this.options.wrapAround && this.cells.length > 1) {
      t = e.modulo(t, this.slideableWidth);
      t -= this.slideableWidth;
      this.shiftWrapCells(t);
    }
    this.setTranslateX(t, this.isAnimating);
    this.dispatchScrollEvent();
  };
  i.setTranslateX = function(t, e) {
    t += this.cursorPosition;
    t = this.options.rightToLeft ? -t : t;
    const i = this.getPositionValue(t);
    this.slider.style.transform = e ? `translate3d(${i},0,0)` : `translateX(${i})`;
  };
  i.dispatchScrollEvent = function() {
    const t = this.slides[0];
    if (!t) {
      return;
    }
    const e = -this.x - t.target;
    const i = e / this.slidesWidth;
    this.dispatchEvent('scroll', null, [i, e]);
  };
  i.positionSliderAtSelected = function() {
    if (!this.cells.length) {
      return;
    }
    this.x = -this.selectedSlide.target;
    this.velocity = 0;
    this.positionSlider();
  };
  i.getPositionValue = function(t) {
    if (this.options.percentPosition) {
      return `${Math.round((t / this.size.innerWidth) * 1e4) * 0.01}%`;
    }
    return `${Math.round(t)}px`;
  };
  i.settle = function(t) {
    const e = !this.isPointerDown && Math.round(this.x * 100) == Math.round(t * 100);
    if (e) {
      this.restingFrames++;
    }
    if (this.restingFrames > 2) {
      this.isAnimating = false;
      delete this.isFreeScrolling;
      this.positionSlider();
      this.dispatchEvent('settle', null, [this.selectedIndex]);
    }
  };
  i.shiftWrapCells = function(t) {
    const e = this.cursorPosition + t;
    this._shiftCells(this.beforeShiftCells, e, -1);
    const i = this.size.innerWidth - (t + this.slideableWidth + this.cursorPosition);
    this._shiftCells(this.afterShiftCells, i, 1);
  };
  i._shiftCells = function(t, e, i) {
    for (let n = 0; n < t.length; n++) {
      const s = t[n];
      const r = e > 0 ? i : 0;
      s.wrapShift(r);
      e -= s.size.outerWidth;
    }
  };
  i._unshiftCells = function(t) {
    if (!t || !t.length) {
      return;
    }
    for (let e = 0; e < t.length; e++) {
      t[e].wrapShift(0);
    }
  };
  i.integratePhysics = function() {
    this.x += this.velocity;
    this.velocity *= this.getFrictionFactor();
  };
  i.applyForce = function(t) {
    this.velocity += t;
  };
  i.getFrictionFactor = function() {
    return 1 - this.options[this.isFreeScrolling ? 'freeScrollFriction' : 'friction'];
  };
  i.getRestingPosition = function() {
    return this.x + this.velocity / (1 - this.getFrictionFactor());
  };
  i.applyDragForce = function() {
    if (!this.isDraggable || !this.isPointerDown) {
      return;
    }
    const t = this.dragX - this.x;
    const e = t - this.velocity;
    this.applyForce(e);
  };
  i.applySelectedAttraction = function() {
    const t = this.isDraggable && this.isPointerDown;
    if (t || this.isFreeScrolling || !this.slides.length) {
      return;
    }
    const e = this.selectedSlide.target * -1 - this.x;
    const i = e * this.options.selectedAttraction;
    this.applyForce(i);
  };
  return i;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/flickity', [
      'ev-emitter/ev-emitter',
      'get-size/get-size',
      'fizzy-ui-utils/utils',
      './cell',
      './slide',
      './animate',
    ], function(i, n, s, r, o, a) {
      return e(t, i, n, s, r, o, a);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(
      t,
      require('ev-emitter'),
      require('get-size'),
      require('fizzy-ui-utils'),
      require('./cell'),
      require('./slide'),
      require('./animate')
    );
  } else {
    const i = t.Flickity;
    t.Flickity = e(t, t.EvEmitter, t.getSize, t.fizzyUIUtils, i.Cell, i.Slide, i.animatePrototype);
  }
})(window, function a(t, e, i, n, s, r, o) {
  let a = t.jQuery;
  const l = t.getComputedStyle;
  const h = t.console;
  function c(t, e) {
    t = n.makeArray(t);
    while (t.length) {
      e.appendChild(t.shift());
    }
  }
  let u = 0;
  const d = {};
  function f(t, e) {
    const i = n.getQueryElement(t);
    if (!i) {
      if (h) {
        h.error(`Bad element for Flickity: ${i || t}`);
      }
      return;
    }
    this.element = i;
    if (this.element.flickityGUID) {
      const s = d[this.element.flickityGUID];
      s.option(e);
      return s;
    }
    if (a) {
      this.$element = a(this.element);
    }
    this.options = n.extend({}, this.constructor.defaults);
    this.option(e);
    this._create();
  }
  f.defaults = {
    accessibility: true,
    cellAlign: 'center',
    freeScrollFriction: 0.075,
    friction: 0.28,
    namespaceJQueryEvents: true,
    percentPosition: true,
    resize: true,
    selectedAttraction: 0.025,
    setGallerySize: true,
  };
  f.createMethods = [];
  const p = f.prototype;
  n.extend(p, e.prototype);
  p._create = function() {
    const e = (this.guid = ++u);
    this.element.flickityGUID = e;
    d[e] = this;
    this.selectedIndex = 0;
    this.restingFrames = 0;
    this.x = 0;
    this.velocity = 0;
    this.originSide = this.options.rightToLeft ? 'right' : 'left';
    this.viewport = document.createElement('div');
    this.viewport.className = 'flickity-viewport';
    this._createSlider();
    if (this.options.resize || this.options.watchCSS) {
      t.addEventListener('resize', this);
    }
    for (const i in this.options.on) {
      const n = this.options.on[i];
      this.on(i, n);
    }
    f.createMethods.forEach(function(t) {
      this[t]();
    }, this);
    if (this.options.watchCSS) {
      this.watchCSS();
    } else {
      this.activate();
    }
  };
  p.option = function(t) {
    n.extend(this.options, t);
  };
  p.activate = function() {
    if (this.isActive) {
      return;
    }
    this.isActive = true;
    this.element.classList.add('flickity-enabled');
    if (this.options.rightToLeft) {
      this.element.classList.add('flickity-rtl');
    }
    this.getSize();
    const t = this._filterFindCellElements(this.element.children);
    c(t, this.slider);
    this.viewport.appendChild(this.slider);
    this.element.appendChild(this.viewport);
    this.reloadCells();
    if (this.options.accessibility) {
      this.element.tabIndex = 0;
      this.element.addEventListener('keydown', this);
    }
    this.emitEvent('activate');
    this.selectInitialIndex();
    this.isInitActivated = true;
    this.dispatchEvent('ready');
  };
  p._createSlider = function() {
    const t = document.createElement('div');
    t.className = 'flickity-slider';
    t.style[this.originSide] = 0;
    this.slider = t;
  };
  p._filterFindCellElements = function(t) {
    return n.filterFindElements(t, this.options.cellSelector);
  };
  p.reloadCells = function() {
    this.cells = this._makeCells(this.slider.children);
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
  };
  p._makeCells = function(t) {
    const e = this._filterFindCellElements(t);
    const i = e.map(function(t) {
      return new s(t, this);
    }, this);
    return i;
  };
  p.getLastCell = function() {
    return this.cells[this.cells.length - 1];
  };
  p.getLastSlide = function() {
    return this.slides[this.slides.length - 1];
  };
  p.positionCells = function() {
    this._sizeCells(this.cells);
    this._positionCells(0);
  };
  p._positionCells = function(t) {
    t = t || 0;
    this.maxCellHeight = t ? this.maxCellHeight || 0 : 0;
    let e = 0;
    if (t > 0) {
      const i = this.cells[t - 1];
      e = i.x + i.size.outerWidth;
    }
    const n = this.cells.length;
    for (let s = t; s < n; s++) {
      const r = this.cells[s];
      r.setPosition(e);
      e += r.size.outerWidth;
      this.maxCellHeight = Math.max(r.size.outerHeight, this.maxCellHeight);
    }
    this.slideableWidth = e;
    this.updateSlides();
    this._containSlides();
    this.slidesWidth = n ? this.getLastSlide().target - this.slides[0].target : 0;
  };
  p._sizeCells = function(t) {
    t.forEach(function(t) {
      t.getSize();
    });
  };
  p.updateSlides = function() {
    this.slides = [];
    if (!this.cells.length) {
      return;
    }
    let t = new r(this);
    this.slides.push(t);
    const e = this.originSide == 'left';
    const i = e ? 'marginRight' : 'marginLeft';
    const n = this._getCanCellFit();
    this.cells.forEach(function(e, s) {
      if (!t.cells.length) {
        t.addCell(e);
        return;
      }
      const o = t.outerWidth - t.firstMargin + (e.size.outerWidth - e.size[i]);
      if (n.call(this, s, o)) {
        t.addCell(e);
      } else {
        t.updateTarget();
        t = new r(this);
        this.slides.push(t);
        t.addCell(e);
      }
    }, this);
    t.updateTarget();
    this.updateSelectedSlide();
  };
  p._getCanCellFit = function() {
    const t = this.options.groupCells;
    if (!t) {
      return function() {
        return false;
      };
    }
    if (typeof t === 'number') {
      const e = parseInt(t, 10);
      return function(t) {
        return t % e !== 0;
      };
    }
    const i = typeof t === 'string' && t.match(/^(\d+)%$/);
    const n = i ? parseInt(i[1], 10) / 100 : 1;
    return function(t, e) {
      return e <= (this.size.innerWidth + 1) * n;
    };
  };
  p._init = p.reposition = function() {
    this.positionCells();
    this.positionSliderAtSelected();
  };
  p.getSize = function() {
    this.size = i(this.element);
    this.setCellAlign();
    this.cursorPosition = this.size.innerWidth * this.cellAlign;
  };
  const v = { center: { left: 0.5, right: 0.5 }, left: { left: 0, right: 1 }, right: { right: 0, left: 1 } };
  p.setCellAlign = function() {
    const t = v[this.options.cellAlign];
    this.cellAlign = t ? t[this.originSide] : this.options.cellAlign;
  };
  p.setGallerySize = function() {
    if (this.options.setGallerySize) {
      const t = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;
      this.viewport.style.height = `${t}px`;
    }
  };
  p._getWrapShiftCells = function() {
    if (!this.options.wrapAround) {
      return;
    }
    this._unshiftCells(this.beforeShiftCells);
    this._unshiftCells(this.afterShiftCells);
    let t = this.cursorPosition;
    const e = this.cells.length - 1;
    this.beforeShiftCells = this._getGapCells(t, e, -1);
    t = this.size.innerWidth - this.cursorPosition;
    this.afterShiftCells = this._getGapCells(t, 0, 1);
  };
  p._getGapCells = function(t, e, i) {
    const n = [];
    while (t > 0) {
      const s = this.cells[e];
      if (!s) {
        break;
      }
      n.push(s);
      e += i;
      t -= s.size.outerWidth;
    }
    return n;
  };
  p._containSlides = function() {
    if (!this.options.contain || this.options.wrapAround || !this.cells.length) {
      return;
    }
    const t = this.options.rightToLeft;
    const e = t ? 'marginRight' : 'marginLeft';
    const i = t ? 'marginLeft' : 'marginRight';
    const n = this.slideableWidth - this.getLastCell().size[i];
    const s = n < this.size.innerWidth;
    const r = this.cursorPosition + this.cells[0].size[e];
    const o = n - this.size.innerWidth * (1 - this.cellAlign);
    this.slides.forEach(function(t) {
      if (s) {
        t.target = n * this.cellAlign;
      } else {
        t.target = Math.max(t.target, r);
        t.target = Math.min(t.target, o);
      }
    }, this);
  };
  p.dispatchEvent = function(t, e, i) {
    const n = e ? [e].concat(i) : i;
    this.emitEvent(t, n);
    if (a && this.$element) {
      t += this.options.namespaceJQueryEvents ? '.flickity' : '';
      let s = t;
      if (e) {
        const r = new a.Event(e);
        r.type = t;
        s = r;
      }
      this.$element.trigger(s, i);
    }
  };
  p.select = function(t, e, i) {
    if (!this.isActive) {
      return;
    }
    t = parseInt(t, 10);
    this._wrapSelect(t);
    if (this.options.wrapAround || e) {
      t = n.modulo(t, this.slides.length);
    }
    if (!this.slides[t]) {
      return;
    }
    const s = this.selectedIndex;
    this.selectedIndex = t;
    this.updateSelectedSlide();
    if (i) {
      this.positionSliderAtSelected();
    } else {
      this.startAnimation();
    }
    if (this.options.adaptiveHeight) {
      this.setGallerySize();
    }
    this.dispatchEvent('select', null, [t]);
    if (t != s) {
      this.dispatchEvent('change', null, [t]);
    }
    this.dispatchEvent('cellSelect');
  };
  p._wrapSelect = function(t) {
    const e = this.slides.length;
    const i = this.options.wrapAround && e > 1;
    if (!i) {
      return t;
    }
    const s = n.modulo(t, e);
    const r = Math.abs(s - this.selectedIndex);
    const o = Math.abs(s + e - this.selectedIndex);
    const a = Math.abs(s - e - this.selectedIndex);
    if (!this.isDragSelect && o < r) {
      t += e;
    } else if (!this.isDragSelect && a < r) {
      t -= e;
    }
    if (t < 0) {
      this.x -= this.slideableWidth;
    } else if (t >= e) {
      this.x += this.slideableWidth;
    }
  };
  p.previous = function(t, e) {
    this.select(this.selectedIndex - 1, t, e);
  };
  p.next = function(t, e) {
    this.select(this.selectedIndex + 1, t, e);
  };
  p.updateSelectedSlide = function() {
    const t = this.slides[this.selectedIndex];
    if (!t) {
      return;
    }
    this.unselectSelectedSlide();
    this.selectedSlide = t;
    t.select();
    this.selectedCells = t.cells;
    this.selectedElements = t.getCellElements();
    this.selectedCell = t.cells[0];
    this.selectedElement = this.selectedElements[0];
  };
  p.unselectSelectedSlide = function() {
    if (this.selectedSlide) {
      this.selectedSlide.unselect();
    }
  };
  p.selectInitialIndex = function() {
    const t = this.options.initialIndex;
    if (this.isInitActivated) {
      this.select(this.selectedIndex, false, true);
      return;
    }
    if (t && typeof t === 'string') {
      const e = this.queryCell(t);
      if (e) {
        this.selectCell(t, false, true);
        return;
      }
    }
    let i = 0;
    if (t && this.slides[t]) {
      i = t;
    }
    this.select(i, false, true);
  };
  p.selectCell = function(t, e, i) {
    const n = this.queryCell(t);
    if (!n) {
      return;
    }
    const s = this.getCellSlideIndex(n);
    this.select(s, e, i);
  };
  p.getCellSlideIndex = function(t) {
    for (let e = 0; e < this.slides.length; e++) {
      const i = this.slides[e];
      const n = i.cells.indexOf(t);
      if (n != -1) {
        return e;
      }
    }
  };
  p.getCell = function(t) {
    for (let e = 0; e < this.cells.length; e++) {
      const i = this.cells[e];
      if (i.element == t) {
        return i;
      }
    }
  };
  p.getCells = function(t) {
    t = n.makeArray(t);
    const e = [];
    t.forEach(function(t) {
      const i = this.getCell(t);
      if (i) {
        e.push(i);
      }
    }, this);
    return e;
  };
  p.getCellElements = function() {
    return this.cells.map(function(t) {
      return t.element;
    });
  };
  p.getParentCell = function(t) {
    const e = this.getCell(t);
    if (e) {
      return e;
    }
    t = n.getParent(t, '.flickity-slider > *');
    return this.getCell(t);
  };
  p.getAdjacentCellElements = function(t, e) {
    if (!t) {
      return this.selectedSlide.getCellElements();
    }
    e = e === undefined ? this.selectedIndex : e;
    const i = this.slides.length;
    if (1 + t * 2 >= i) {
      return this.getCellElements();
    }
    let s = [];
    for (let r = e - t; r <= e + t; r++) {
      const o = this.options.wrapAround ? n.modulo(r, i) : r;
      const a = this.slides[o];
      if (a) {
        s = s.concat(a.getCellElements());
      }
    }
    return s;
  };
  p.queryCell = function(t) {
    if (typeof t === 'number') {
      return this.cells[t];
    }
    if (typeof t === 'string') {
      if (t.match(/^[#.]?[\d/]/)) {
        return;
      }
      t = this.element.querySelector(t);
    }
    return this.getCell(t);
  };
  p.uiChange = function() {
    this.emitEvent('uiChange');
  };
  p.childUIPointerDown = function(t) {
    if (t.type != 'touchstart') {
      t.preventDefault();
    }
    this.focus();
  };
  p.onresize = function() {
    this.watchCSS();
    this.resize();
  };
  n.debounceMethod(f, 'onresize', 150);
  p.resize = function() {
    if (!this.isActive) {
      return;
    }
    this.getSize();
    if (this.options.wrapAround) {
      this.x = n.modulo(this.x, this.slideableWidth);
    }
    this.positionCells();
    this._getWrapShiftCells();
    this.setGallerySize();
    this.emitEvent('resize');
    const t = this.selectedElements && this.selectedElements[0];
    this.selectCell(t, false, true);
  };
  p.watchCSS = function() {
    const t = this.options.watchCSS;
    if (!t) {
      return;
    }
    const e = l(this.element, ':after').content;
    if (e.indexOf('flickity') != -1) {
      this.activate();
    } else {
      this.deactivate();
    }
  };
  p.onkeydown = function(t) {
    const e = document.activeElement && document.activeElement != this.element;
    if (!this.options.accessibility || e) {
      return;
    }
    const i = f.keyboardHandlers[t.keyCode];
    if (i) {
      i.call(this);
    }
  };
  f.keyboardHandlers = {
    37() {
      const t = this.options.rightToLeft ? 'next' : 'previous';
      this.uiChange();
      this[t]();
    },
    39() {
      const t = this.options.rightToLeft ? 'previous' : 'next';
      this.uiChange();
      this[t]();
    },
  };
  p.focus = function() {
    const e = t.pageYOffset;
    this.element.focus({ preventScroll: true });
    if (t.pageYOffset != e) {
      t.scrollTo(t.pageXOffset, e);
    }
  };
  p.deactivate = function() {
    if (!this.isActive) {
      return;
    }
    this.element.classList.remove('flickity-enabled');
    this.element.classList.remove('flickity-rtl');
    this.unselectSelectedSlide();
    this.cells.forEach(function(t) {
      t.destroy();
    });
    this.element.removeChild(this.viewport);
    c(this.slider.children, this.element);
    if (this.options.accessibility) {
      this.element.removeAttribute('tabIndex');
      this.element.removeEventListener('keydown', this);
    }
    this.isActive = false;
    this.emitEvent('deactivate');
  };
  p.destroy = function() {
    this.deactivate();
    t.removeEventListener('resize', this);
    this.allOff();
    this.emitEvent('destroy');
    if (a && this.$element) {
      a.removeData(this.element, 'flickity');
    }
    delete this.element.flickityGUID;
    delete d[this.guid];
  };
  n.extend(p, o);
  f.data = function(t) {
    t = n.getQueryElement(t);
    const e = t && t.flickityGUID;
    return e && d[e];
  };
  n.htmlInit(f, 'flickity');
  if (a && a.bridget) {
    a.bridget('flickity', f);
  }
  f.setJQuery = function(t) {
    a = t;
  };
  f.Cell = s;
  f.Slide = r;
  return f;
});
/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('unipointer/unipointer', ['ev-emitter/ev-emitter'], function(i) {
      return e(t, i);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('ev-emitter'));
  } else {
    t.Unipointer = e(t, t.EvEmitter);
  }
})(window, function l(t, e) {
  function i() {}
  function n() {}
  const s = (n.prototype = Object.create(e.prototype));
  s.bindStartEvent = function(t) {
    this._bindStartEvent(t, true);
  };
  s.unbindStartEvent = function(t) {
    this._bindStartEvent(t, false);
  };
  s._bindStartEvent = function(e, i) {
    i = i === undefined ? true : i;
    const n = i ? 'addEventListener' : 'removeEventListener';
    let s = 'mousedown';
    if (t.PointerEvent) {
      s = 'pointerdown';
    } else if ('ontouchstart' in t) {
      s = 'touchstart';
    }
    e[n](s, this);
  };
  s.handleEvent = function(t) {
    const e = `on${t.type}`;
    if (this[e]) {
      this[e](t);
    }
  };
  s.getTouch = function(t) {
    for (let e = 0; e < t.length; e++) {
      const i = t[e];
      if (i.identifier == this.pointerIdentifier) {
        return i;
      }
    }
  };
  s.onmousedown = function(t) {
    const e = t.button;
    if (e && (e !== 0 && e !== 1)) {
      return;
    }
    this._pointerDown(t, t);
  };
  s.ontouchstart = function(t) {
    this._pointerDown(t, t.changedTouches[0]);
  };
  s.onpointerdown = function(t) {
    this._pointerDown(t, t);
  };
  s._pointerDown = function(t, e) {
    if (t.button || this.isPointerDown) {
      return;
    }
    this.isPointerDown = true;
    this.pointerIdentifier = e.pointerId !== undefined ? e.pointerId : e.identifier;
    this.pointerDown(t, e);
  };
  s.pointerDown = function(t, e) {
    this._bindPostStartEvents(t);
    this.emitEvent('pointerDown', [t, e]);
  };
  const r = {
    mousedown: ['mousemove', 'mouseup'],
    touchstart: ['touchmove', 'touchend', 'touchcancel'],
    pointerdown: ['pointermove', 'pointerup', 'pointercancel'],
  };
  s._bindPostStartEvents = function(e) {
    if (!e) {
      return;
    }
    const i = r[e.type];
    i.forEach(function(e) {
      t.addEventListener(e, this);
    }, this);
    this._boundPointerEvents = i;
  };
  s._unbindPostStartEvents = function() {
    if (!this._boundPointerEvents) {
      return;
    }
    this._boundPointerEvents.forEach(function(e) {
      t.removeEventListener(e, this);
    }, this);
    delete this._boundPointerEvents;
  };
  s.onmousemove = function(t) {
    this._pointerMove(t, t);
  };
  s.onpointermove = function(t) {
    if (t.pointerId == this.pointerIdentifier) {
      this._pointerMove(t, t);
    }
  };
  s.ontouchmove = function(t) {
    const e = this.getTouch(t.changedTouches);
    if (e) {
      this._pointerMove(t, e);
    }
  };
  s._pointerMove = function(t, e) {
    this.pointerMove(t, e);
  };
  s.pointerMove = function(t, e) {
    this.emitEvent('pointerMove', [t, e]);
  };
  s.onmouseup = function(t) {
    this._pointerUp(t, t);
  };
  s.onpointerup = function(t) {
    if (t.pointerId == this.pointerIdentifier) {
      this._pointerUp(t, t);
    }
  };
  s.ontouchend = function(t) {
    const e = this.getTouch(t.changedTouches);
    if (e) {
      this._pointerUp(t, e);
    }
  };
  s._pointerUp = function(t, e) {
    this._pointerDone();
    this.pointerUp(t, e);
  };
  s.pointerUp = function(t, e) {
    this.emitEvent('pointerUp', [t, e]);
  };
  s._pointerDone = function() {
    this._pointerReset();
    this._unbindPostStartEvents();
    this.pointerDone();
  };
  s._pointerReset = function() {
    this.isPointerDown = false;
    delete this.pointerIdentifier;
  };
  s.pointerDone = i;
  s.onpointercancel = function(t) {
    if (t.pointerId == this.pointerIdentifier) {
      this._pointerCancel(t, t);
    }
  };
  s.ontouchcancel = function(t) {
    const e = this.getTouch(t.changedTouches);
    if (e) {
      this._pointerCancel(t, e);
    }
  };
  s._pointerCancel = function(t, e) {
    this._pointerDone();
    this.pointerCancel(t, e);
  };
  s.pointerCancel = function(t, e) {
    this.emitEvent('pointerCancel', [t, e]);
  };
  n.getPointerPoint = function(t) {
    return { x: t.pageX, y: t.pageY };
  };
  return n;
});
/*!
 * Unidragger v2.3.0
 * Draggable base class
 * MIT license
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('unidragger/unidragger', ['unipointer/unipointer'], function(i) {
      return e(t, i);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('unipointer'));
  } else {
    t.Unidragger = e(t, t.Unipointer);
  }
})(window, function h(t, e) {
  function i() {}
  const n = (i.prototype = Object.create(e.prototype));
  n.bindHandles = function() {
    this._bindHandles(true);
  };
  n.unbindHandles = function() {
    this._bindHandles(false);
  };
  n._bindHandles = function(e) {
    e = e === undefined ? true : e;
    const i = e ? 'addEventListener' : 'removeEventListener';
    const n = e ? this._touchActionValue : '';
    for (let s = 0; s < this.handles.length; s++) {
      const r = this.handles[s];
      this._bindStartEvent(r, e);
      r[i]('click', this);
      if (t.PointerEvent) {
        r.style.touchAction = n;
      }
    }
  };
  n._touchActionValue = 'none';
  n.pointerDown = function(t, e) {
    const i = this.okayPointerDown(t);
    if (!i) {
      return;
    }
    this.pointerDownPointer = e;
    t.preventDefault();
    this.pointerDownBlur();
    this._bindPostStartEvents(t);
    this.emitEvent('pointerDown', [t, e]);
  };
  const s = { TEXTAREA: true, INPUT: true, SELECT: true, OPTION: true };
  const r = { radio: true, checkbox: true, button: true, submit: true, image: true, file: true };
  n.okayPointerDown = function(t) {
    const e = s[t.target.nodeName];
    const i = r[t.target.type];
    const n = !e || i;
    if (!n) {
      this._pointerReset();
    }
    return n;
  };
  n.pointerDownBlur = function() {
    const t = document.activeElement;
    const e = t && t.blur && t != document.body;
    if (e) {
      t.blur();
    }
  };
  n.pointerMove = function(t, e) {
    const i = this._dragPointerMove(t, e);
    this.emitEvent('pointerMove', [t, e, i]);
    this._dragMove(t, e, i);
  };
  n._dragPointerMove = function(t, e) {
    const i = { x: e.pageX - this.pointerDownPointer.pageX, y: e.pageY - this.pointerDownPointer.pageY };
    if (!this.isDragging && this.hasDragStarted(i)) {
      this._dragStart(t, e);
    }
    return i;
  };
  n.hasDragStarted = function(t) {
    return Math.abs(t.x) > 3 || Math.abs(t.y) > 3;
  };
  n.pointerUp = function(t, e) {
    this.emitEvent('pointerUp', [t, e]);
    this._dragPointerUp(t, e);
  };
  n._dragPointerUp = function(t, e) {
    if (this.isDragging) {
      this._dragEnd(t, e);
    } else {
      this._staticClick(t, e);
    }
  };
  n._dragStart = function(t, e) {
    this.isDragging = true;
    this.isPreventingClicks = true;
    this.dragStart(t, e);
  };
  n.dragStart = function(t, e) {
    this.emitEvent('dragStart', [t, e]);
  };
  n._dragMove = function(t, e, i) {
    if (!this.isDragging) {
      return;
    }
    this.dragMove(t, e, i);
  };
  n.dragMove = function(t, e, i) {
    t.preventDefault();
    this.emitEvent('dragMove', [t, e, i]);
  };
  n._dragEnd = function(t, e) {
    this.isDragging = false;
    setTimeout(
      function() {
        delete this.isPreventingClicks;
      }.bind(this)
    );
    this.dragEnd(t, e);
  };
  n.dragEnd = function(t, e) {
    this.emitEvent('dragEnd', [t, e]);
  };
  n.onclick = function(t) {
    if (this.isPreventingClicks) {
      t.preventDefault();
    }
  };
  n._staticClick = function(t, e) {
    if (this.isIgnoringMouseUp && t.type == 'mouseup') {
      return;
    }
    this.staticClick(t, e);
    if (t.type != 'mouseup') {
      this.isIgnoringMouseUp = true;
      setTimeout(
        function() {
          delete this.isIgnoringMouseUp;
        }.bind(this),
        400
      );
    }
  };
  n.staticClick = function(t, e) {
    this.emitEvent('staticClick', [t, e]);
  };
  i.getPointerPoint = e.getPointerPoint;
  return i;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/drag', ['./flickity', 'unidragger/unidragger', 'fizzy-ui-utils/utils'], function(i, n, s) {
      return e(t, i, n, s);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('./flickity'), require('unidragger'), require('fizzy-ui-utils'));
  } else {
    t.Flickity = e(t, t.Flickity, t.Unidragger, t.fizzyUIUtils);
  }
})(window, function c(t, e, i, n) {
  n.extend(e.defaults, { draggable: '>1', dragThreshold: 3 });
  e.createMethods.push('_createDrag');
  const s = e.prototype;
  n.extend(s, i.prototype);
  s._touchActionValue = 'pan-y';
  const r = 'createTouch' in document;
  let o = false;
  s._createDrag = function() {
    this.on('activate', this.onActivateDrag);
    this.on('uiChange', this._uiChangeDrag);
    this.on('deactivate', this.onDeactivateDrag);
    this.on('cellChange', this.updateDraggable);
    if (r && !o) {
      t.addEventListener('touchmove', function() {});
      o = true;
    }
  };
  s.onActivateDrag = function() {
    this.handles = [this.viewport];
    this.bindHandles();
    this.updateDraggable();
  };
  s.onDeactivateDrag = function() {
    this.unbindHandles();
    this.element.classList.remove('is-draggable');
  };
  s.updateDraggable = function() {
    if (this.options.draggable == '>1') {
      this.isDraggable = this.slides.length > 1;
    } else {
      this.isDraggable = this.options.draggable;
    }
    if (this.isDraggable) {
      this.element.classList.add('is-draggable');
    } else {
      this.element.classList.remove('is-draggable');
    }
  };
  s.bindDrag = function() {
    this.options.draggable = true;
    this.updateDraggable();
  };
  s.unbindDrag = function() {
    this.options.draggable = false;
    this.updateDraggable();
  };
  s._uiChangeDrag = function() {
    delete this.isFreeScrolling;
  };
  s.pointerDown = function(e, i) {
    if (!this.isDraggable) {
      this._pointerDownDefault(e, i);
      return;
    }
    const n = this.okayPointerDown(e);
    if (!n) {
      return;
    }
    this._pointerDownPreventDefault(e);
    this.pointerDownFocus(e);
    if (document.activeElement != this.element) {
      this.pointerDownBlur();
    }
    this.dragX = this.x;
    this.viewport.classList.add('is-pointer-down');
    this.pointerDownScroll = l();
    t.addEventListener('scroll', this);
    this._pointerDownDefault(e, i);
  };
  s._pointerDownDefault = function(t, e) {
    this.pointerDownPointer = { pageX: e.pageX, pageY: e.pageY };
    this._bindPostStartEvents(t);
    this.dispatchEvent('pointerDown', t, [e]);
  };
  const a = { INPUT: true, TEXTAREA: true, SELECT: true };
  s.pointerDownFocus = function(t) {
    const e = a[t.target.nodeName];
    if (!e) {
      this.focus();
    }
  };
  s._pointerDownPreventDefault = function(t) {
    const e = t.type == 'touchstart';
    const i = t.pointerType == 'touch';
    const n = a[t.target.nodeName];
    if (!e && !i && !n) {
      t.preventDefault();
    }
  };
  s.hasDragStarted = function(t) {
    return Math.abs(t.x) > this.options.dragThreshold;
  };
  s.pointerUp = function(t, e) {
    delete this.isTouchScrolling;
    this.viewport.classList.remove('is-pointer-down');
    this.dispatchEvent('pointerUp', t, [e]);
    this._dragPointerUp(t, e);
  };
  s.pointerDone = function() {
    t.removeEventListener('scroll', this);
    delete this.pointerDownScroll;
  };
  s.dragStart = function(e, i) {
    if (!this.isDraggable) {
      return;
    }
    this.dragStartPosition = this.x;
    this.startAnimation();
    t.removeEventListener('scroll', this);
    this.dispatchEvent('dragStart', e, [i]);
  };
  s.pointerMove = function(t, e) {
    const i = this._dragPointerMove(t, e);
    this.dispatchEvent('pointerMove', t, [e, i]);
    this._dragMove(t, e, i);
  };
  s.dragMove = function(t, e, i) {
    if (!this.isDraggable) {
      return;
    }
    t.preventDefault();
    this.previousDragX = this.dragX;
    const n = this.options.rightToLeft ? -1 : 1;
    if (this.options.wrapAround) {
      i.x %= this.slideableWidth;
    }
    let s = this.dragStartPosition + i.x * n;
    if (!this.options.wrapAround && this.slides.length) {
      const r = Math.max(-this.slides[0].target, this.dragStartPosition);
      s = s > r ? (s + r) * 0.5 : s;
      const o = Math.min(-this.getLastSlide().target, this.dragStartPosition);
      s = s < o ? (s + o) * 0.5 : s;
    }
    this.dragX = s;
    this.dragMoveTime = new Date();
    this.dispatchEvent('dragMove', t, [e, i]);
  };
  s.dragEnd = function(t, e) {
    if (!this.isDraggable) {
      return;
    }
    if (this.options.freeScroll) {
      this.isFreeScrolling = true;
    }
    let i = this.dragEndRestingSelect();
    if (this.options.freeScroll && !this.options.wrapAround) {
      const n = this.getRestingPosition();
      this.isFreeScrolling = -n > this.slides[0].target && -n < this.getLastSlide().target;
    } else if (!this.options.freeScroll && i == this.selectedIndex) {
      i += this.dragEndBoostSelect();
    }
    delete this.previousDragX;
    this.isDragSelect = this.options.wrapAround;
    this.select(i);
    delete this.isDragSelect;
    this.dispatchEvent('dragEnd', t, [e]);
  };
  s.dragEndRestingSelect = function() {
    const t = this.getRestingPosition();
    const e = Math.abs(this.getSlideDistance(-t, this.selectedIndex));
    const i = this._getClosestResting(t, e, 1);
    const n = this._getClosestResting(t, e, -1);
    const s = i.distance < n.distance ? i.index : n.index;
    return s;
  };
  s._getClosestResting = function(t, e, i) {
    let n = this.selectedIndex;
    let s = Infinity;
    const r =
      this.options.contain && !this.options.wrapAround
        ? function(t, e) {
            return t <= e;
          }
        : function(t, e) {
            return t < e;
          };
    while (r(e, s)) {
      n += i;
      s = e;
      e = this.getSlideDistance(-t, n);
      if (e === null) {
        break;
      }
      e = Math.abs(e);
    }
    return { distance: s, index: n - i };
  };
  s.getSlideDistance = function(t, e) {
    const i = this.slides.length;
    const s = this.options.wrapAround && i > 1;
    const r = s ? n.modulo(e, i) : e;
    const o = this.slides[r];
    if (!o) {
      return null;
    }
    const a = s ? this.slideableWidth * Math.floor(e / i) : 0;
    return t - (o.target + a);
  };
  s.dragEndBoostSelect = function() {
    if (this.previousDragX === undefined || !this.dragMoveTime || new Date() - this.dragMoveTime > 100) {
      return 0;
    }
    const t = this.getSlideDistance(-this.dragX, this.selectedIndex);
    const e = this.previousDragX - this.dragX;
    if (t > 0 && e > 0) {
      return 1;
    }
    if (t < 0 && e < 0) {
      return -1;
    }
    return 0;
  };
  s.staticClick = function(t, e) {
    const i = this.getParentCell(t.target);
    const n = i && i.element;
    const s = i && this.cells.indexOf(i);
    this.dispatchEvent('staticClick', t, [e, n, s]);
  };
  s.onscroll = function() {
    const t = l();
    const e = this.pointerDownScroll.x - t.x;
    const i = this.pointerDownScroll.y - t.y;
    if (Math.abs(e) > 3 || Math.abs(i) > 3) {
      this._pointerDone();
    }
  };
  function l() {
    return { x: t.pageXOffset, y: t.pageYOffset };
  }
  return e;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/prev-next-button', ['./flickity', 'unipointer/unipointer', 'fizzy-ui-utils/utils'], function(
      i,
      n,
      s
    ) {
      return e(t, i, n, s);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('./flickity'), require('unipointer'), require('fizzy-ui-utils'));
  } else {
    e(t, t.Flickity, t.Unipointer, t.fizzyUIUtils);
  }
})(window, function u(t, e, i, n) {
  const s = 'http://www.w3.org/2000/svg';
  function r(t, e) {
    this.direction = t;
    this.parent = e;
    this._create();
  }
  r.prototype = Object.create(i.prototype);
  r.prototype._create = function() {
    this.isEnabled = true;
    this.isPrevious = this.direction == -1;
    const t = this.parent.options.rightToLeft ? 1 : -1;
    this.isLeft = this.direction == t;
    const e = (this.element = document.createElement('button'));
    e.className = 'flickity-button flickity-prev-next-button';
    e.className += this.isPrevious ? ' previous' : ' next';
    e.setAttribute('type', 'button');
    this.disable();
    e.setAttribute('aria-label', this.isPrevious ? 'Previous' : 'Next');
    const i = this.createSVG();
    e.appendChild(i);
    this.parent.on('select', this.update.bind(this));
    this.on('pointerDown', this.parent.childUIPointerDown.bind(this.parent));
  };
  r.prototype.activate = function() {
    this.bindStartEvent(this.element);
    this.element.addEventListener('click', this);
    this.parent.element.appendChild(this.element);
  };
  r.prototype.deactivate = function() {
    this.parent.element.removeChild(this.element);
    this.unbindStartEvent(this.element);
    this.element.removeEventListener('click', this);
  };
  r.prototype.createSVG = function() {
    const t = document.createElementNS(s, 'svg');
    t.setAttribute('class', 'flickity-button-icon');
    t.setAttribute('viewBox', '0 0 100 100');
    const e = document.createElementNS(s, 'path');
    const i = o(this.parent.options.arrowShape);
    e.setAttribute('d', i);
    e.setAttribute('class', 'arrow');
    if (!this.isLeft) {
      e.setAttribute('transform', 'translate(100, 100) rotate(180) ');
    }
    t.appendChild(e);
    return t;
  };
  function o(t) {
    if (typeof t === 'string') {
      return t;
    }
    return (
      `M ${t.x0},50` +
      ` L ${t.x1},${t.y1 + 50} L ${t.x2},${t.y2 + 50} L ${t.x3},50 ` +
      ` L ${t.x2},${50 - t.y2} L ${t.x1},${50 - t.y1} Z`
    );
  }
  r.prototype.handleEvent = n.handleEvent;
  r.prototype.onclick = function() {
    if (!this.isEnabled) {
      return;
    }
    this.parent.uiChange();
    const t = this.isPrevious ? 'previous' : 'next';
    this.parent[t]();
  };
  r.prototype.enable = function() {
    if (this.isEnabled) {
      return;
    }
    this.element.disabled = false;
    this.isEnabled = true;
  };
  r.prototype.disable = function() {
    if (!this.isEnabled) {
      return;
    }
    this.element.disabled = true;
    this.isEnabled = false;
  };
  r.prototype.update = function() {
    const t = this.parent.slides;
    if (this.parent.options.wrapAround && t.length > 1) {
      this.enable();
      return;
    }
    const e = t.length ? t.length - 1 : 0;
    const i = this.isPrevious ? 0 : e;
    const n = this.parent.selectedIndex == i ? 'disable' : 'enable';
    this[n]();
  };
  r.prototype.destroy = function() {
    this.deactivate();
    this.allOff();
  };
  n.extend(e.defaults, { prevNextButtons: true, arrowShape: { x0: 10, x1: 60, y1: 50, x2: 70, y2: 40, x3: 30 } });
  e.createMethods.push('_createPrevNextButtons');
  const a = e.prototype;
  a._createPrevNextButtons = function() {
    if (!this.options.prevNextButtons) {
      return;
    }
    this.prevButton = new r(-1, this);
    this.nextButton = new r(1, this);
    this.on('activate', this.activatePrevNextButtons);
  };
  a.activatePrevNextButtons = function() {
    this.prevButton.activate();
    this.nextButton.activate();
    this.on('deactivate', this.deactivatePrevNextButtons);
  };
  a.deactivatePrevNextButtons = function() {
    this.prevButton.deactivate();
    this.nextButton.deactivate();
    this.off('deactivate', this.deactivatePrevNextButtons);
  };
  e.PrevNextButton = r;
  return e;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/page-dots', ['./flickity', 'unipointer/unipointer', 'fizzy-ui-utils/utils'], function(i, n, s) {
      return e(t, i, n, s);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('./flickity'), require('unipointer'), require('fizzy-ui-utils'));
  } else {
    e(t, t.Flickity, t.Unipointer, t.fizzyUIUtils);
  }
})(window, function d(t, e, i, n) {
  function s(t) {
    this.parent = t;
    this._create();
  }
  s.prototype = Object.create(i.prototype);
  s.prototype._create = function() {
    this.holder = document.createElement('ol');
    this.holder.className = 'flickity-page-dots';
    this.dots = [];
    this.handleClick = this.onClick.bind(this);
    this.on('pointerDown', this.parent.childUIPointerDown.bind(this.parent));
  };
  s.prototype.activate = function() {
    this.setDots();
    this.holder.addEventListener('click', this.handleClick);
    this.bindStartEvent(this.holder);
    this.parent.element.appendChild(this.holder);
  };
  s.prototype.deactivate = function() {
    this.holder.removeEventListener('click', this.handleClick);
    this.unbindStartEvent(this.holder);
    this.parent.element.removeChild(this.holder);
  };
  s.prototype.setDots = function() {
    const t = this.parent.slides.length - this.dots.length;
    if (t > 0) {
      this.addDots(t);
    } else if (t < 0) {
      this.removeDots(-t);
    }
  };
  s.prototype.addDots = function(t) {
    const e = document.createDocumentFragment();
    const i = [];
    const n = this.dots.length;
    const s = n + t;
    for (let r = n; r < s; r++) {
      const o = document.createElement('li');
      o.className = 'dot';
      o.setAttribute('aria-label', `Page dot ${r + 1}`);
      e.appendChild(o);
      i.push(o);
    }
    this.holder.appendChild(e);
    this.dots = this.dots.concat(i);
  };
  s.prototype.removeDots = function(t) {
    const e = this.dots.splice(this.dots.length - t, t);
    e.forEach(function(t) {
      this.holder.removeChild(t);
    }, this);
  };
  s.prototype.updateSelected = function() {
    if (this.selectedDot) {
      this.selectedDot.className = 'dot';
      this.selectedDot.removeAttribute('aria-current');
    }
    if (!this.dots.length) {
      return;
    }
    this.selectedDot = this.dots[this.parent.selectedIndex];
    this.selectedDot.className = 'dot is-selected';
    this.selectedDot.setAttribute('aria-current', 'step');
  };
  s.prototype.onTap = s.prototype.onClick = function(t) {
    const e = t.target;
    if (e.nodeName != 'LI') {
      return;
    }
    this.parent.uiChange();
    const i = this.dots.indexOf(e);
    this.parent.select(i);
  };
  s.prototype.destroy = function() {
    this.deactivate();
    this.allOff();
  };
  e.PageDots = s;
  n.extend(e.defaults, { pageDots: true });
  e.createMethods.push('_createPageDots');
  const r = e.prototype;
  r._createPageDots = function() {
    if (!this.options.pageDots) {
      return;
    }
    this.pageDots = new s(this);
    this.on('activate', this.activatePageDots);
    this.on('select', this.updateSelectedPageDots);
    this.on('cellChange', this.updatePageDots);
    this.on('resize', this.updatePageDots);
    this.on('deactivate', this.deactivatePageDots);
  };
  r.activatePageDots = function() {
    this.pageDots.activate();
  };
  r.updateSelectedPageDots = function() {
    this.pageDots.updateSelected();
  };
  r.updatePageDots = function() {
    this.pageDots.setDots();
  };
  r.deactivatePageDots = function() {
    this.pageDots.deactivate();
  };
  e.PageDots = s;
  return e;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/player', ['ev-emitter/ev-emitter', 'fizzy-ui-utils/utils', './flickity'], function(t, i, n) {
      return e(t, i, n);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(require('ev-emitter'), require('fizzy-ui-utils'), require('./flickity'));
  } else {
    e(t.EvEmitter, t.fizzyUIUtils, t.Flickity);
  }
})(window, function f(t, e, i) {
  function n(t) {
    this.parent = t;
    this.state = 'stopped';
    this.onVisibilityChange = this.visibilityChange.bind(this);
    this.onVisibilityPlay = this.visibilityPlay.bind(this);
  }
  n.prototype = Object.create(t.prototype);
  n.prototype.play = function() {
    if (this.state == 'playing') {
      return;
    }
    const t = document.hidden;
    if (t) {
      document.addEventListener('visibilitychange', this.onVisibilityPlay);
      return;
    }
    this.state = 'playing';
    document.addEventListener('visibilitychange', this.onVisibilityChange);
    this.tick();
  };
  n.prototype.tick = function() {
    if (this.state != 'playing') {
      return;
    }
    let t = this.parent.options.autoPlay;
    t = typeof t === 'number' ? t : 3e3;
    const e = this;
    this.clear();
    this.timeout = setTimeout(function() {
      e.parent.next(true);
      e.tick();
    }, t);
  };
  n.prototype.stop = function() {
    this.state = 'stopped';
    this.clear();
    document.removeEventListener('visibilitychange', this.onVisibilityChange);
  };
  n.prototype.clear = function() {
    clearTimeout(this.timeout);
  };
  n.prototype.pause = function() {
    if (this.state == 'playing') {
      this.state = 'paused';
      this.clear();
    }
  };
  n.prototype.unpause = function() {
    if (this.state == 'paused') {
      this.play();
    }
  };
  n.prototype.visibilityChange = function() {
    const t = document.hidden;
    this[t ? 'pause' : 'unpause']();
  };
  n.prototype.visibilityPlay = function() {
    this.play();
    document.removeEventListener('visibilitychange', this.onVisibilityPlay);
  };
  e.extend(i.defaults, { pauseAutoPlayOnHover: true });
  i.createMethods.push('_createPlayer');
  const s = i.prototype;
  s._createPlayer = function() {
    this.player = new n(this);
    this.on('activate', this.activatePlayer);
    this.on('uiChange', this.stopPlayer);
    this.on('pointerDown', this.stopPlayer);
    this.on('deactivate', this.deactivatePlayer);
  };
  s.activatePlayer = function() {
    if (!this.options.autoPlay) {
      return;
    }
    this.player.play();
    this.element.addEventListener('mouseenter', this);
  };
  s.playPlayer = function() {
    this.player.play();
  };
  s.stopPlayer = function() {
    this.player.stop();
  };
  s.pausePlayer = function() {
    this.player.pause();
  };
  s.unpausePlayer = function() {
    this.player.unpause();
  };
  s.deactivatePlayer = function() {
    this.player.stop();
    this.element.removeEventListener('mouseenter', this);
  };
  s.onmouseenter = function() {
    if (!this.options.pauseAutoPlayOnHover) {
      return;
    }
    this.player.pause();
    this.element.addEventListener('mouseleave', this);
  };
  s.onmouseleave = function() {
    this.player.unpause();
    this.element.removeEventListener('mouseleave', this);
  };
  i.Player = n;
  return i;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/add-remove-cell', ['./flickity', 'fizzy-ui-utils/utils'], function(i, n) {
      return e(t, i, n);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('./flickity'), require('fizzy-ui-utils'));
  } else {
    e(t, t.Flickity, t.fizzyUIUtils);
  }
})(window, function p(t, e, i) {
  function n(t) {
    const e = document.createDocumentFragment();
    t.forEach(function(t) {
      e.appendChild(t.element);
    });
    return e;
  }
  const s = e.prototype;
  s.insert = function(t, e) {
    const i = this._makeCells(t);
    if (!i || !i.length) {
      return;
    }
    const s = this.cells.length;
    e = e === undefined ? s : e;
    const r = n(i);
    const o = e == s;
    if (o) {
      this.slider.appendChild(r);
    } else {
      const a = this.cells[e].element;
      this.slider.insertBefore(r, a);
    }
    if (e === 0) {
      this.cells = i.concat(this.cells);
    } else if (o) {
      this.cells = this.cells.concat(i);
    } else {
      const l = this.cells.splice(e, s - e);
      this.cells = this.cells.concat(i).concat(l);
    }
    this._sizeCells(i);
    this.cellChange(e, true);
  };
  s.append = function(t) {
    this.insert(t, this.cells.length);
  };
  s.prepend = function(t) {
    this.insert(t, 0);
  };
  s.remove = function(t) {
    const e = this.getCells(t);
    if (!e || !e.length) {
      return;
    }
    let n = this.cells.length - 1;
    e.forEach(function(t) {
      t.remove();
      const e = this.cells.indexOf(t);
      n = Math.min(e, n);
      i.removeFrom(this.cells, t);
    }, this);
    this.cellChange(n, true);
  };
  s.cellSizeChange = function(t) {
    const e = this.getCell(t);
    if (!e) {
      return;
    }
    e.getSize();
    const i = this.cells.indexOf(e);
    this.cellChange(i);
  };
  s.cellChange = function(t, e) {
    const i = this.selectedElement;
    this._positionCells(t);
    this._getWrapShiftCells();
    this.setGallerySize();
    const n = this.getCell(i);
    if (n) {
      this.selectedIndex = this.getCellSlideIndex(n);
    }
    this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex);
    this.emitEvent('cellChange', [t]);
    this.select(this.selectedIndex);
    if (e) {
      this.positionSliderAtSelected();
    }
  };
  return e;
});
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/lazyload', ['./flickity', 'fizzy-ui-utils/utils'], function(i, n) {
      return e(t, i, n);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('./flickity'), require('fizzy-ui-utils'));
  } else {
    e(t, t.Flickity, t.fizzyUIUtils);
  }
})(window, function v(t, e, i) {
  e.createMethods.push('_createLazyload');
  const n = e.prototype;
  n._createLazyload = function() {
    this.on('select', this.lazyLoad);
  };
  n.lazyLoad = function() {
    const t = this.options.lazyLoad;
    if (!t) {
      return;
    }
    const e = typeof t === 'number' ? t : 0;
    const i = this.getAdjacentCellElements(e);
    let n = [];
    i.forEach(function(t) {
      const e = s(t);
      n = n.concat(e);
    });
    n.forEach(function(t) {
      new r(t, this);
    }, this);
  };
  function s(t) {
    if (t.nodeName == 'IMG') {
      const e = t.getAttribute('data-flickity-lazyload');
      const n = t.getAttribute('data-flickity-lazyload-src');
      const s = t.getAttribute('data-flickity-lazyload-srcset');
      if (e || n || s) {
        return [t];
      }
    }
    const r = 'img[data-flickity-lazyload], ' + 'img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]';
    const o = t.querySelectorAll(r);
    return i.makeArray(o);
  }
  function r(t, e) {
    this.img = t;
    this.flickity = e;
    this.load();
  }
  r.prototype.handleEvent = i.handleEvent;
  r.prototype.load = function() {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    const t = this.img.getAttribute('data-flickity-lazyload') || this.img.getAttribute('data-flickity-lazyload-src');
    const e = this.img.getAttribute('data-flickity-lazyload-srcset');
    this.img.src = t;
    if (e) {
      this.img.setAttribute('srcset', e);
    }
    this.img.removeAttribute('data-flickity-lazyload');
    this.img.removeAttribute('data-flickity-lazyload-src');
    this.img.removeAttribute('data-flickity-lazyload-srcset');
  };
  r.prototype.onload = function(t) {
    this.complete(t, 'flickity-lazyloaded');
  };
  r.prototype.onerror = function(t) {
    this.complete(t, 'flickity-lazyerror');
  };
  r.prototype.complete = function(t, e) {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
    const i = this.flickity.getParentCell(this.img);
    const n = i && i.element;
    this.flickity.cellSizeChange(n);
    this.img.classList.add(e);
    this.flickity.dispatchEvent('lazyLoad', t, n);
  };
  e.LazyLoader = r;
  return e;
});
/*!
 * Flickity v2.2.1
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2020 Metafizzy
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity/js/index', [
      './flickity',
      './drag',
      './prev-next-button',
      './page-dots',
      './player',
      './add-remove-cell',
      './lazyload',
    ], e);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(
      require('./flickity'),
      require('./drag'),
      require('./prev-next-button'),
      require('./page-dots'),
      require('./player'),
      require('./add-remove-cell'),
      require('./lazyload')
    );
  }
})(window, function g(t) {
  return t;
});
/*!
 * Flickity asNavFor v2.0.2
 * enable asNavFor for Flickity
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('flickity-as-nav-for/as-nav-for', ['flickity/js/index', 'fizzy-ui-utils/utils'], e);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(require('flickity'), require('fizzy-ui-utils'));
  } else {
    t.Flickity = e(t.Flickity, t.fizzyUIUtils);
  }
})(window, function m(t, e) {
  t.createMethods.push('_createAsNavFor');
  const i = t.prototype;
  i._createAsNavFor = function() {
    this.on('activate', this.activateAsNavFor);
    this.on('deactivate', this.deactivateAsNavFor);
    this.on('destroy', this.destroyAsNavFor);
    const t = this.options.asNavFor;
    if (!t) {
      return;
    }
    const e = this;
    setTimeout(function i() {
      e.setNavCompanion(t);
    });
  };
  i.setNavCompanion = function(i) {
    i = e.getQueryElement(i);
    const n = t.data(i);
    if (!n || n == this) {
      return;
    }
    this.navCompanion = n;
    const s = this;
    this.onNavCompanionSelect = function() {
      s.navCompanionSelect();
    };
    n.on('select', this.onNavCompanionSelect);
    this.on('staticClick', this.onNavStaticClick);
    this.navCompanionSelect(true);
  };
  i.navCompanionSelect = function(t) {
    const e = this.navCompanion && this.navCompanion.selectedCells;
    if (!e) {
      return;
    }
    const i = e[0];
    const s = this.navCompanion.cells.indexOf(i);
    const r = s + e.length - 1;
    const o = Math.floor(n(s, r, this.navCompanion.cellAlign));
    this.selectCell(o, false, t);
    this.removeNavSelectedElements();
    if (o >= this.cells.length) {
      return;
    }
    const a = this.cells.slice(s, r + 1);
    this.navSelectedElements = a.map(function(t) {
      return t.element;
    });
    this.changeNavSelectedClass('add');
  };
  function n(t, e, i) {
    return (e - t) * i + t;
  }
  i.changeNavSelectedClass = function(t) {
    this.navSelectedElements.forEach(function(e) {
      e.classList[t]('is-nav-selected');
    });
  };
  i.activateAsNavFor = function() {
    this.navCompanionSelect(true);
  };
  i.removeNavSelectedElements = function() {
    if (!this.navSelectedElements) {
      return;
    }
    this.changeNavSelectedClass('remove');
    delete this.navSelectedElements;
  };
  i.onNavStaticClick = function(t, e, i, n) {
    if (typeof n === 'number') {
      this.navCompanion.selectCell(n);
    }
  };
  i.deactivateAsNavFor = function() {
    this.removeNavSelectedElements();
  };
  i.destroyAsNavFor = function() {
    if (!this.navCompanion) {
      return;
    }
    this.navCompanion.off('select', this.onNavCompanionSelect);
    this.off('staticClick', this.onNavStaticClick);
    delete this.navCompanion;
  };
  return t;
});
/*!
 * imagesLoaded v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define('imagesloaded/imagesloaded', ['ev-emitter/ev-emitter'], function(i) {
      return e(t, i);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('ev-emitter'));
  } else {
    t.imagesLoaded = e(t, t.EvEmitter);
  }
})(typeof window !== 'undefined' ? window : this, function y(t, e) {
  let i = t.jQuery;
  const n = t.console;
  function s(t, e) {
    for (const i in e) {
      t[i] = e[i];
    }
    return t;
  }
  const r = Array.prototype.slice;
  function o(t) {
    if (Array.isArray(t)) {
      return t;
    }
    const e = typeof t === 'object' && typeof t.length === 'number';
    if (e) {
      return r.call(t);
    }
    return [t];
  }
  function a(t, e, r) {
    if (!(this instanceof a)) {
      return new a(t, e, r);
    }
    let l = t;
    if (typeof t === 'string') {
      l = document.querySelectorAll(t);
    }
    if (!l) {
      n.error(`Bad element for imagesLoaded ${l || t}`);
      return;
    }
    this.elements = o(l);
    this.options = s({}, this.options);
    if (typeof e === 'function') {
      r = e;
    } else {
      s(this.options, e);
    }
    if (r) {
      this.on('always', r);
    }
    this.getImages();
    if (i) {
      this.jqDeferred = new i.Deferred();
    }
    setTimeout(this.check.bind(this));
  }
  a.prototype = Object.create(e.prototype);
  a.prototype.options = {};
  a.prototype.getImages = function() {
    this.images = [];
    this.elements.forEach(this.addElementImages, this);
  };
  a.prototype.addElementImages = function(t) {
    if (t.nodeName == 'IMG') {
      this.addImage(t);
    }
    if (this.options.background === true) {
      this.addElementBackgroundImages(t);
    }
    const e = t.nodeType;
    if (!e || !l[e]) {
      return;
    }
    const i = t.querySelectorAll('img');
    for (var n = 0; n < i.length; n++) {
      const s = i[n];
      this.addImage(s);
    }
    if (typeof this.options.background === 'string') {
      const r = t.querySelectorAll(this.options.background);
      for (n = 0; n < r.length; n++) {
        const o = r[n];
        this.addElementBackgroundImages(o);
      }
    }
  };
  var l = { 1: true, 9: true, 11: true };
  a.prototype.addElementBackgroundImages = function(t) {
    const e = getComputedStyle(t);
    if (!e) {
      return;
    }
    const i = /url\((['"])?(.*?)\1\)/gi;
    let n = i.exec(e.backgroundImage);
    while (n !== null) {
      const s = n && n[2];
      if (s) {
        this.addBackground(s, t);
      }
      n = i.exec(e.backgroundImage);
    }
  };
  a.prototype.addImage = function(t) {
    const e = new h(t);
    this.images.push(e);
  };
  a.prototype.addBackground = function(t, e) {
    const i = new c(t, e);
    this.images.push(i);
  };
  a.prototype.check = function() {
    const t = this;
    this.progressedCount = 0;
    this.hasAnyBroken = false;
    if (!this.images.length) {
      this.complete();
      return;
    }
    function e(e, i, n) {
      setTimeout(function() {
        t.progress(e, i, n);
      });
    }
    this.images.forEach(function(t) {
      t.once('progress', e);
      t.check();
    });
  };
  a.prototype.progress = function(t, e, i) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !t.isLoaded;
    this.emitEvent('progress', [this, t, e]);
    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, t);
    }
    if (this.progressedCount == this.images.length) {
      this.complete();
    }
    if (this.options.debug && n) {
      n.log(`progress: ${i}`, t, e);
    }
  };
  a.prototype.complete = function() {
    const t = this.hasAnyBroken ? 'fail' : 'done';
    this.isComplete = true;
    this.emitEvent(t, [this]);
    this.emitEvent('always', [this]);
    if (this.jqDeferred) {
      const e = this.hasAnyBroken ? 'reject' : 'resolve';
      this.jqDeferred[e](this);
    }
  };
  function h(t) {
    this.img = t;
  }
  h.prototype = Object.create(e.prototype);
  h.prototype.check = function() {
    const t = this.getIsImageComplete();
    if (t) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      return;
    }
    this.proxyImage = new Image();
    this.proxyImage.addEventListener('load', this);
    this.proxyImage.addEventListener('error', this);
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.proxyImage.src = this.img.src;
  };
  h.prototype.getIsImageComplete = function() {
    return this.img.complete && this.img.naturalWidth;
  };
  h.prototype.confirm = function(t, e) {
    this.isLoaded = t;
    this.emitEvent('progress', [this, this.img, e]);
  };
  h.prototype.handleEvent = function(t) {
    const e = `on${t.type}`;
    if (this[e]) {
      this[e](t);
    }
  };
  h.prototype.onload = function() {
    this.confirm(true, 'onload');
    this.unbindEvents();
  };
  h.prototype.onerror = function() {
    this.confirm(false, 'onerror');
    this.unbindEvents();
  };
  h.prototype.unbindEvents = function() {
    this.proxyImage.removeEventListener('load', this);
    this.proxyImage.removeEventListener('error', this);
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };
  function c(t, e) {
    this.url = t;
    this.element = e;
    this.img = new Image();
  }
  c.prototype = Object.create(h.prototype);
  c.prototype.check = function() {
    this.img.addEventListener('load', this);
    this.img.addEventListener('error', this);
    this.img.src = this.url;
    const t = this.getIsImageComplete();
    if (t) {
      this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
      this.unbindEvents();
    }
  };
  c.prototype.unbindEvents = function() {
    this.img.removeEventListener('load', this);
    this.img.removeEventListener('error', this);
  };
  c.prototype.confirm = function(t, e) {
    this.isLoaded = t;
    this.emitEvent('progress', [this, this.element, e]);
  };
  a.makeJQueryPlugin = function(e) {
    e = e || t.jQuery;
    if (!e) {
      return;
    }
    i = e;
    i.fn.imagesLoaded = function(t, e) {
      const n = new a(this, t, e);
      return n.jqDeferred.promise(i(this));
    };
  };
  a.makeJQueryPlugin();
  return a;
});
/*!
 * Flickity imagesLoaded v2.0.0
 * enables imagesLoaded option for Flickity
 */
(function(t, e) {
  if (typeof define === 'function' && define.amd) {
    define(['flickity/js/index', 'imagesloaded/imagesloaded'], function(i, n) {
      return e(t, i, n);
    });
  } else if (typeof module === 'object' && module.exports) {
    module.exports = e(t, require('flickity'), require('imagesloaded'));
  } else {
    t.Flickity = e(t, t.Flickity, t.imagesLoaded);
  }
})(window, function b(t, e, i) {
  e.createMethods.push('_createImagesLoaded');
  const n = e.prototype;
  n._createImagesLoaded = function() {
    this.on('activate', this.imagesLoaded);
  };
  n.imagesLoaded = function() {
    if (!this.options.imagesLoaded) {
      return;
    }
    const t = this;
    function e(e, i) {
      const n = t.getParentCell(i.img);
      t.cellSizeChange(n && n.element);
      if (!t.options.freeScroll) {
        t.positionSliderAtSelected();
      }
    }
    i(this.slider).on('progress', e);
  };
  return e;
});
